syntax = "proto3";
package open.rl.env;

enum DType {
  float32 = 0;
  float64 = 1;
  int32 = 2;
  int64 = 3;
  bool = 4;
  uint8 = 5;
}
message NDArray {
  DType dtype = 1;
  repeated int32 shape = 2;
  bytes data = 3;
}

message TextSpace {
  int32 max_length = 1;
  int32 min_length = 2;
  string charset = 3;
}
message SequenceSpace {
  Space space = 1;
  bool stack = 2;
}
message OneOfSpace {
  repeated Space spaces = 1;
}
message GraphSpace {
  oneof node_space {
    BoxSpace box_node = 1;
    DiscreteSpace discrete_node = 2;
  }
  oneof edge_space {
    BoxSpace box_edge = 3;
    DiscreteSpace discrete_edge = 4;
    Empty empty = 5;
  }
}
message BoxSpace {
  NDArray low = 1;
  NDArray high = 2;
  repeated int32 shape = 3;
  DType dtype = 4;
}
message DiscreteSpace {
  int32 n = 1;
  int32 start = 2;
}
message MultiDiscreteSpace {
  repeated int32 nvec = 1;
}
message MultiBinarySpace {
  int32 n = 1;
}
message TupleSpace {
  repeated Space spaces = 1;
}
message DictSpace {
  map<string, Space> spaces = 1;
}
message Space {
  oneof type {
    BoxSpace box = 1;
    DiscreteSpace discrete = 2;
    MultiDiscreteSpace multidiscrete = 3;
    MultiBinarySpace multibinary = 4;
    TupleSpace tuple = 5;
    DictSpace dict = 6;
    TextSpace text = 7;
    SequenceSpace sequence = 8;
    OneOfSpace oneof = 9;
    GraphSpace graph = 10;
  }
}

message TupleObservation {
  repeated Observation items = 1;
}
message MapObservation {
  map<string, Observation> items = 1;
}
message Observation {
  oneof value {
    NDArray array = 1;
    int32 int32 = 2;
    float float = 3;
    string string = 4;
    TupleObservation tuple = 5;
    MapObservation map = 6;
  }
}

message TupleAction {
  repeated Action items = 1;
}
message MapAction {
  map<string, Action> items = 1;
}
message Action {
  oneof value {
    NDArray array = 1;
    int32 int32 = 2;
    float float = 3;
    string string = 4;
    TupleAction tuple = 5;
    MapAction map = 6;
  }
}

message Info {
  map<string, string> data = 1;
}

message MakeRequest {
  string env_id = 1;
  bool render = 2;
  map<string, string> options = 3;
}
message MakeResponse {
  string env_handle = 1;
}

message SpaceRequest {
  string env_handle = 1;
  enum SpaceType {
    OBSERVATION = 0;
    ACTION = 1;
  }
  SpaceType space_type = 2;
}
message SpaceResponse {
  Space space = 1;
}

message ResetRequest {
  string env_handle = 1;
  optional int32 seed = 2;
  map<string, string> options = 3;
}
message ResetResponse {
  Observation observation = 1;
  Info info = 2;
}

message StepRequest {
  string env_handle = 1;
  Action action = 2;
}
message StepResponse {
  Observation observation = 1;
  float reward = 2;
  bool terminated = 3;
  bool truncated = 4;
  Info info = 5;
}

message RenderRequest {
  string env_handle = 1;
}
message RenderResponse {
  oneof frame {
    NDArray rgb_array = 1;
    string ansi = 2;
    Empty empty = 3;
  }
}

message CloseRequest {
  string env_handle = 1;
}
message Empty {}

service Env {
  rpc Make(MakeRequest) returns (MakeResponse);
  rpc GetSpace(SpaceRequest) returns (SpaceResponse);
  rpc Reset(ResetRequest) returns (ResetResponse);
  rpc Step(StepRequest) returns (StepResponse);
  rpc Render(RenderRequest) returns (RenderResponse);
  rpc Close(CloseRequest) returns (Empty);
}
